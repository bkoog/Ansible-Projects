---

- name: F5 BIGIP HA (HIGH AVAILABILITY) ACTIVE/STANDBY CONFIGURATION PLAYBOOK 
  hosts: localhost
  gather_facts: false  
  connection: local
  collections: 
    - f5networks.f5_modules

  vars_files:
    - bigip_ha_vars.yml

  # Steps to follow to create a HA between a pair of BIG-IPs 
  # 1. Make sure hostnames are configured correctly
  # 2. Create HA-VLANs 
  # 3. Create HA-SELFIPs 
  # 4. Config-sync
  # 5. Device Trust 
  # 6. Device Group - Sync Failover 
  # 7. Add members into the device group
  # 8. Perform initial sync

  tasks:

    # DO NOT RUN THIS MODULE AFTER HA IS SETUP, ONLY FOR DAY0 CONFIG
    - name: Set the hostname of the BIG-IP members
      bigip_hostname:
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
        hostname:  "{{ item.bigip_name }}"
      delegate_to: localhost
      with_items: 
        - "{{ bigip_member1 }}"
        - "{{ bigip_member2 }}"
      when: '"yes" in initial_setup'
      
    - name: Configure HA VLANs on the BIG-IPs members
      bigip_vlan:
        name: "{{ item.bigip_ha_vlan.name }}"
        tag: "{{ item.bigip_ha_vlan.vlan_id }}"
        untagged_interfaces: "{{ item.bigip_ha_vlan.interface }}"
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
      delegate_to: localhost
      with_items: 
        - "{{ bigip_member1 }}"
        - "{{ bigip_member2 }}"

    - name: Configure HA SELF-IPs on the BIG-IPs members
      bigip_selfip:
        name: "{{ item.bigip_ha_selfip.name }}"
        address: "{{ item.bigip_ha_selfip.address }}"
        netmask: "{{item.bigip_ha_selfip.netmask }}"
        vlan: "{{ item.bigip_ha_selfip.vlan }}"
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
      delegate_to: localhost
      with_items: 
        - "{{ bigip_member1 }}"
        - "{{ bigip_member2 }}"

    - name: Making sure HA interface is enabled on the BIG-IPs members
      bigip_interface:
        name: "{{ item.bigip_ha_vlan.interface }}"
        enabled: yes
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
      delegate_to: localhost
      with_items: 
        - "{{ bigip_member1 }}"
        - "{{ bigip_member2 }}"

    - name: Configure device connectivity between BIG-IP HA pair - ConfigSync
      bigip_device_connectivity:
        config_sync_ip: "{{ item.bigip_ha_selfip.address }}"
        mirror_primary_address: "{{ item.bigip_ha_selfip.address }}"
        unicast_failover:
        - address: "{{ item.bigip_ha_selfip.address }}"
        - address: "{{ item.bigip_host }}"
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
      delegate_to: localhost
      with_items: 
        - "{{ bigip_member1 }}"
        - "{{ bigip_member2 }}"

    - name: Configure device trust for BIG-IP peer devices when member1 is master 
      bigip_device_trust:
        type: peer
        peer_server: "{{ bigip_member2.bigip_host }}"
        peer_hostname: "{{ bigip_member2.bigip_name }}"
        peer_user: "{{ bigip_username }}"
        peer_password: "{{ bigip_password }}"
        state: present
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
      delegate_to: localhost
      with_items: 
        - "{{ bigip_member1 }}"
      when: 
        - bigip_member1.master|bool == true

    - name: Configure device trust for BIG-IP peer devices when member2 is master
      bigip_device_trust:
        type: peer
        peer_server: "{{ bigip_member1.bigip_host }}"
        peer_hostname: "{{ bigip_member1.bigip_name }}"
        peer_user: "{{ bigip_username }}"
        peer_password: "{{ bigip_password }}"
        state: present
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
      delegate_to: localhost
      with_items: 
        - "{{ bigip_member2 }}"
      when: 
        - bigip_member2.master|bool == true

    - name: Create a sync-failover device group with auto-sync enabled/disabled
      bigip_device_group:
        name: "{{ item.device_group.name }}"
        description: "{{ item.device_group.description }}"
        auto_sync: "{{ item.device_group.auto_sync }}"
        save_on_auto_sync: "{{ item.device_group.save_on_auto_sync }}"
        type: "{{ item.device_group.type }}"
        network_failover: "{{ item.device_group.network_failover }}"
        full_sync : "{{ item.device_group.full_sync }}"
        max_incremental_sync_size: "{{ item.device_group.max_incremental_sync_size }}"
        state: "{{ item.device_group.state }}"
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
      delegate_to: localhost
      with_items: 
        - "{{ bigip_member1 }}"
        - "{{ bigip_member2 }}"

    - name: Add the BIG-IP peer members to a device group
      bigip_device_group_member:
        name: "{{ item.bigip_name }}"
        device_group: "{{ item.device_group.name }}"
        state: "{{ item.device_group.state }}"
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
      delegate_to: localhost
      with_items: 
        - "{{ bigip_member1 }}"
        - "{{ bigip_member2 }}"

    - name: Perform an initial sync of a BIG-IP to a new device group
      bigip_configsync_action:
        device_group: "{{ item.device_group.name }}"
        sync_device_to_group: yes
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
      delegate_to: localhost
      with_items: 
        - "{{ bigip_member2 }}"

    - name: Get the failover state of both BIG-IP members 
      bigip_command:
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
        commands:
          - show sys failover 
        wait_for:
         - result[0] contains "Failover"
      with_items: 
        - "{{ bigip_member1 }}"
        - "{{ bigip_member2 }}"
      delegate_to: localhost
      register: failover_state
      tags: failover-status

    - name: Display the failover state of both BIG-IP members 
      debug: 
        msg: "{{ item.stdout }}"
      with_items: 
        - "{{ failover_state.results }}"
      tags: display-ha-status

    - name: Check the sync status of both BIP-IP members
      bigip_command:
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
        commands:
         - show cm sync-status
        wait_for:
         - result[0] contains "high-availability"
      with_items: 
        - "{{ bigip_member1 }}"
        - "{{ bigip_member2 }}"
      delegate_to: localhost
      register: sync_status

    - name: Display the sync status of both BIG-IP members 
      debug: 
        msg: "{{ item.stdout_lines }}"
      with_items: 
        - "{{ sync_status.results }}"

    # Optional, if you like to make sure member1 to be an Active device 
    - name: Get the failover state of "{{ bigip_member1.bigip_name }}"
      bigip_command:
        provider:
          server: "{{ bigip_member1.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
        commands:
          - show sys failover 
        wait_for:
         - result[0] contains "Failover"
      delegate_to: localhost
      register: fo_state
      tags: fo-status

    - name: Make BIG-IP member1 become active
      bigip_command:
        provider:
          server: "{{ item.bigip_host }}"
          user: "{{ bigip_username }}"
          password: "{{ bigip_password }}"
          validate_certs: "{{ validate_certs }}"
        commands:
          - run /sys failover standby # commands is not idempotent
      with_items: 
        - "{{ bigip_member2 }}"
      when: "'standby' in fo_state.stdout[0]"
      delegate_to: localhost
      tags: make-active

